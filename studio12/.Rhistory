2+3
2*3
2/3
2^3
x = 2+3
print (x)
y = 1+2
print(x*y)
x <- 3
print(x)
x <- 5.412
print(x)
x = c(1.1, 0.0, 3.14, 2.718)
print(x)
x <- c(2, 4,6)
x = 1:4
print(x)
y = x + 5
print(y)
x= 1:5
print(x)
y = sample(x, 3)
print(y)
y= sample(1:6, 12, replace=TRUE)
z = matrix(y, nrow=3, ncol=4)
print(z)
n_trials <- 10000  # Number of simulations
roll_dice <- function(dice) {
sum(sapply(dice, function(sides) sample(1:sides, 1)))
}
set1 <- c(4, 6, 8, 12)
set2 <- c(10, 20)
wins <- sum(replicate(n_trials, roll_dice(set1) > roll_dice(set2)))
probability <- wins / n_trials
print(probability)
trials = 10000
set1 = c(4, 6, 8, 12)
set2 = c(10, 20)
rolls1 = sample(1:4, trials, replace = TRUE) + sample(1:6, trials, replace = TRUE) + sample(1:8, trials, raplce = TRUE) + sample(1:12, trials, replace = TRUE)
rolls1 = sample(1:4, trials, replace = TRUE) + sample(1:6, trials, replace = TRUE) + sample(1:8, trials, replace = TRUE) + sample(1:12, trials, replace = TRUE)
rolls2 = sample(1:10, trials, replace = TRUE) + sample(1:12, trials, replace = TRUE)
wins = sum(rolls1 > rolls2)
probability = wins/trials
print(probablity)
print(probability)
for (i in 1:3) { }
for (i in 1:3) {
rolls1 = sample(1:4, trials, replace = TRUE) + sample(1:6, trials, replace = TRUE) + sample(1:8, trials, replace = TRUE) + sample(1:12, trials, replace = TRUE)
rolls2 = sample(1:10, trials, replace = TRUE) + sample(1:12, trials, replace = TRUE)
wins = sum(rolls1 > rolls2)
probability = wins/trials
print(probability)
}
+
+     print(probability)
+
+     print(probability)
for (i in 1:3) {
rolls1 = sample(1:4, trials, replace = TRUE) +
sample(1:6, trials, replace = TRUE) +
sample(1:8, trials, replace = TRUE) +
sample(1:12, trials, replace = TRUE)
rolls2 = sample(1:10, trials, replace = TRUE) + sample(1:12, trials, replace = TRUE)
wins = sum(rolls1 > rolls2)
probability = wins/trials
print(probability)
}
2+3
2^3
3.14^3.14
100*mean(sin(30:87))
x = rbinom(1000,1,.5);
total = sum(x)
print(total)
rolls1 = sample(1:4, trials, replace = TRUE) +
sample(1:6, trials, replace = TRUE) +
sample(1:8, trials, replace = TRUE) +
sample(1:12, trials, replace = TRUE)
outputs:
# [1] 0.7511
# [1] 0.7506
#
for (i in 1:3) {
rolls1 = sample(1:4, trials, replace = TRUE) +
sample(1:6, trials, replace = TRUE) +
sample(1:8, trials, replace = TRUE) +
sample(1:12, trials, replace = TRUE)
rolls2 = sample(1:10, trials, replace = TRUE) + sample(1:12, trials, replace = TRUE)
wins = sum(rolls1 > rolls2)
probability = wins/trials
print(probability)
}
for (i in 1:3) {
rolls1 = sample(1:4, trials, replace = TRUE) +
sample(1:6, trials, replace = TRUE) +
sample(1:8, trials, replace = TRUE) +
sample(1:12, trials, replace = TRUE)
rolls2 = sample(1:10, trials, replace = TRUE) + sample(1:12, trials, replace = TRUE)
}
for (i in 1:3) {
rolls1 = sample(1:4, trials, replace = TRUE) +
sample(1:6, trials, replace = TRUE) +
sample(1:8, trials, replace = TRUE) +
sample(1:12, trials, replace = TRUE)
rolls2 = sample(1:10, trials, replace = TRUE) + sample(1:12, trials, replace = TRUE)
wins = sum(rolls1 > rolls2)
probability = wins/trials
print(probability)
}
for (i in 1:3) {
rolls1 = sample(1:4, trials, replace = TRUE) +
sample(1:6, trials, replace = TRUE) +
sample(1:8, trials, replace = TRUE) +
sample(1:12, trials, replace = TRUE)
rolls2 = sample(1:10, trials, replace = TRUE) + sample(1:12, trials, replace = TRUE)
wins = sum(rolls1 > rolls2)
probability = wins/trials
print(probability)
}
for (i in 1:3) {
rolls1 = sample(1:4, trials, replace = TRUE) +
sample(1:6, trials, replace = TRUE) +
sample(1:8, trials, replace = TRUE) +
sample(1:12, trials, replace = TRUE)
rolls2 = sample(1:10, trials, replace = TRUE) + sample(1:12, trials, replace = TRUE)
wins = sum(rolls1 > rolls2)
probability = wins/trials
print(probability)
}
trials = 10000
for (i in 1:3) {
rolls1 = sample(1:4, trials, replace = TRUE) +
sample(1:6, trials, replace = TRUE) +
sample(1:8, trials, replace = TRUE) +
sample(1:12, trials, replace = TRUE)
rolls2 = sample(1:10, trials, replace = TRUE) + sample(1:12, trials, replace = TRUE)
wins = sum(rolls1 > rolls2)
probability = wins/trials
print(probability)
}
trials = 10000000
for (i in 1:3) {
rolls1 = sample(1:4, trials, replace = TRUE) +
sample(1:6, trials, replace = TRUE) +
sample(1:8, trials, replace = TRUE) +
sample(1:12, trials, replace = TRUE)
rolls2 = sample(1:10, trials, replace = TRUE) + sample(1:12, trials, replace = TRUE)
wins = sum(rolls1 > rolls2)
probability = wins/trials
print(probability)
}
trials = 100000
for (i in 1:3) {
rolls1 = sample(1:4, trials, replace = TRUE) +
sample(1:6, trials, replace = TRUE) +
sample(1:8, trials, replace = TRUE) +
sample(1:12, trials, replace = TRUE)
rolls2 = sample(1:10, trials, replace = TRUE) + sample(1:12, trials, replace = TRUE)
wins = sum(rolls1 > rolls2)
probability = wins/trials
print(probability)
}
for (i in 1:3) {
rolls1 = sample(1:4, trials, replace = TRUE) +
sample(1:6, trials, replace = TRUE) +
sample(1:8, trials, replace = TRUE) +
sample(1:12, trials, replace = TRUE)
rolls2 = sample(1:10, trials, replace = TRUE) + sample(1:20, trials, replace = TRUE)
wins = sum(rolls1 > rolls2)
probability = wins/trials
print(probability)
}
for (i in 1:3) {
rolls1 = sample(1:4, trials, replace = TRUE) +
sample(1:6, trials, replace = TRUE) +
sample(1:8, trials, replace = TRUE) +
sample(1:12, trials, replace = TRUE)
rolls2 = sample(1:10, trials, replace = TRUE) + sample(1:20, trials, replace = TRUE)
wins = sum(rolls1 > rolls2)
probability = wins/trials
print(probability)
}
source("~/.active-rstudio-document")
source("~/Documents/18.05_studios/deseq2.R")
source("~/Documents/18.05_studios/deseq2.R")
source("~/Documents/18.05_studios/deseq2.R")
merged <- apply(merged, 2, as.integer)
Seatbelts
t.test(front ~ law, data=Seatbelts)
t.test(rear ~ law, data=Seatbelts)
model = lm(front ~ law, Seatbelts)
summary(model)
model = lm(rear ~ law, Seatbelts)
summary(model)
model2 = lm(front ~ law + PetrolPrice, Seatbelts)
summary(model2)
model2 = lm(rear ~ law + PetrolPrice, Seatbelts)
summary(model2)
source("~/.active-rstudio-document")
source("~/Documents/18.05_studios/scatter_urop.R")
ggplot(merged, aes(x = Value1, y = Value2)) +
geom_point(alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(
title = "Dataset Comparison",
x = "Dataset 1 Values",
y = "Dataset 2 Values"
) +
theme_minimal()
source("~/Documents/18.05_studios/scatter_urop.R")
# Load required library
library(ggplot2)
source("~/Documents/18.05_studios/scatter_urop.R")
source("~/Documents/18.05_studios/scatter_urop.R")
# Merge on Ref name
merged <- merge(df1, df2, by = "Ref")
source("~/Documents/18.05_studios/scatter_urop.R", echo=TRUE)
source("~/Documents/18.05_studios/scatter_urop.R")
source("~/Documents/18.05_studios/scatter_urop.R")
dev.off()
source("~/Documents/18.05_studios/scatter_urop.R")
dev.off()
source("~/Documents/18.05_studios/scatter_urop.R")
dev.off()
source("~/Documents/18.05_studios/scatter_urop.R")
source("~/Documents/18.05_studios/scatter_urop.R")
ggplot(merged, aes(x = Value1, y = Value2)) +
geom_point(alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(
title = "R24-5134 vs r24-5135 Mapped",
x = "R24-5134",
y = "r24-5135"
) +
theme_minimal()
source("~/Documents/18.05_studios/scatter_urop.R")
source("~/Documents/18.05_studios/scatter_urop.R")
# Total reads mapped to references (excluding special categories)
real_refs <- !grepl("antisense|not_unique|\\*", merged_data$ref)
source("~/Documents/18.05_studios/scatter_urop.R")
# Calculate normalization factors
norm_factor_1 <- 1000000 / total_sample1  # Normalize to CPM (counts per million)
source("~/Documents/18.05_studios/scatter_urop.R")
source("~/Documents/18.05_studios/studio12/studio12.r")
source("~/Documents/18.05_studios/studio12/studio12.r")
# -------------------------------------
# Problem 1a: Plotting the observations and different forcings
# see the instructions for this studio.
studio12_problem_1a = function() {
plot(
years,
obs,
col = "black",
type = "o",
ylim = c(min(c(obs, ghg, aer, nat)), max(c(obs, ghg, aer, nat))),
xlab = "Year",
ylab = "Temperature anomaly [K]"
)
lines(years, ghg, col = "red")
lines(years, aer, col = "blue")
lines(years, nat, col = "green4")
legend_labels = c("HadCRUT5", "hist-ghg", "hist-aer", "hist-nat")
legend(
"topleft",
legend_labels,
col = c("black", "red", "blue", "green4"),
lty = rep(1, 6),
pch = c(1, NA, NA, NA, NA, NA)
)
# Do not change the above code.
# ********* YOUR CODE BELOW HERE ***********
cat("1a: the reason for ... is ...\n")
}
source("~/Documents/18.05_studios/studio12/studio12.r")
setwd("~/Documents/18.05_studios/studio12")
source("~/Documents/18.05_studios/studio12/studio12.r")
setwd("~/Documents/18.05_studios/studio12")
source("~/Documents/18.05_studios/studio12/studio12.r")
source("~/Documents/18.05_studios/studio12/studio12.r")
studio12_problem_1a()
source("~/Documents/18.05_studios/studio12/studio12.r")
studio12_problem_1a()
source("~/Documents/18.05_studios/studio12/studio12.r")
studio12_problem_1b()
source("~/Documents/18.05_studios/studio12/studio12.r")
studio12_problem_1b()
source("~/Documents/18.05_studios/studio12/studio12.r")
studio12_problem_1b()
source("~/Documents/18.05_studios/studio12/studio12.r")
studio12_problem_1c()
source("~/Documents/18.05_studios/studio12/studio12.r")
studio12_problem_1c()
source("~/Documents/18.05_studios/studio12/studio12.r")
source("~/Documents/18.05_studios/studio12/studio12.r")
studio12_problem_1d()
source("~/Documents/18.05_studios/studio12/studio12.r")
studio12_problem_1e()
source("~/Documents/18.05_studios/studio12/studio12.r")
studio12_problem_1a()
studio12_problem_1b()
studio12_problem_1c()
studio12_problem_1d()
studio12_problem_1e()
